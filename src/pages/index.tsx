import React, { Fragment, useState } from "react";
import Link from "next/link";
import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { Dialog, Transition } from "@headlessui/react";
import { GameChoice } from "../components/GameChoice";
import { PlayerChoice } from "../components/PlayerChoice";
import { SelectScore } from "../components/SelectScore";

const Home: NextPage = () => {
  // Form state
  const [game, setGame] = useState("worldle");
  const [userId, setUserId] = useState("");
  const [score, setScore] = useState(4);
  // Dialog state
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  // Fetch data fns
  const { data } = trpc.users.getAll.useQuery();
  const createWorldleScoreMutation = trpc.worldle.createScore.useMutation();
  const createSutomScoreMutation = trpc.sutom.createScore.useMutation();

  // Handlers
  const handleSelectScore = (e: React.ChangeEvent<HTMLInputElement>) => {
    setScore(parseInt(e.target.value, 10));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (game === "worldle") {
      createWorldleScoreMutation.mutate(
        { userId, score },
        { onSuccess: () => setIsDialogOpen(true) }
      );
    } else {
      createSutomScoreMutation.mutate(
        { userId, score },
        { onSuccess: () => setIsDialogOpen(true) }
      );
    }
  };

  const handleCloseDialog = () => {
    setIsDialogOpen(false);
    resetForm();
  };

  // Utils
  const resetForm = () => {
    setGame("worldle");
    setUserId("");
    setScore(4);
  };

  return (
    <>
      <Head>
        <title>Alpha Gang&Games</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex min-h-screen flex-col items-center justify-around px-4 py-20">
        <h1 className="text-center text-3xl font-extrabold leading-normal text-white md:text-[3rem]">
          Alpha Gang&Games
        </h1>
        <div className="flex flex-grow flex-col items-center justify-around rounded-lg border border-slate-700 bg-slate-800 p-6 shadow-md">
          <h2 className="text-center text-2xl">Salut ! tu joues à quoi ?</h2>
          <GameChoice game={game} onGameChoice={setGame} />
          <h2 className="text-center text-2xl">et ton petit nom ?</h2>
          <PlayerChoice
            userList={data}
            userId={userId}
            onPlayerChoice={setUserId}
          />
          <h2 className="text-center text-2xl">balance ton score...</h2>
          <div className="flex justify-around">
            <SelectScore score={score} handleSelectScore={handleSelectScore} />
          </div>
          <div className="flex justify-center">
            <button
              onClick={handleSubmit}
              className="rounded bg-orange-500 px-4 py-2 hover:bg-orange-700"
            >
              Et ça part!
            </button>
          </div>
        </div>
      </main>
      <>
        <Transition appear show={isDialogOpen} as={Fragment}>
          <Dialog
            as="div"
            className="relative z-10"
            onClose={() => setIsDialogOpen(false)}
          >
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0"
              enterTo="opacity-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100"
              leaveTo="opacity-0"
            >
              <div className="fixed inset-0 bg-black bg-opacity-25" />
            </Transition.Child>

            <div className="fixed inset-0 overflow-y-auto">
              <div className="flex min-h-full items-center justify-center p-4 text-center">
                <Transition.Child
                  as={Fragment}
                  enter="ease-out duration-300"
                  enterFrom="opacity-0 scale-95"
                  enterTo="opacity-100 scale-100"
                  leave="ease-in duration-200"
                  leaveFrom="opacity-100 scale-100"
                  leaveTo="opacity-0 scale-95"
                >
                  <Dialog.Panel className="w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all">
                    <Dialog.Title
                      as="h3"
                      className="text-lg font-medium leading-6 text-gray-900"
                    >
                      C&apos;est dans la boîte!
                    </Dialog.Title>
                    <div className="mt-2">
                      <p className="text-sm text-gray-500">
                        Tu veux voir ton score ?
                      </p>
                    </div>

                    <div className="mt-4 flex justify-between">
                      <Link href={`http://localhost:3000/user/${userId}`}>
                        <button
                          type="button"
                          className="inline-flex justify-center rounded-md border border-transparent bg-orange-100 px-4 py-2 text-sm font-medium text-orange-600 hover:bg-orange-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 focus-visible:ring-offset-2"
                        >
                          Oui, steuplé!
                        </button>
                      </Link>
                      <button
                        type="button"
                        className="inline-flex justify-center rounded-md border border-transparent bg-blue-100 px-4 py-2 text-sm font-medium text-blue-900 hover:bg-blue-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2"
                        onClick={handleCloseDialog}
                      >
                        Nan, j&apos;m&apos;en branle.
                      </button>
                    </div>
                  </Dialog.Panel>
                </Transition.Child>
              </div>
            </div>
          </Dialog>
        </Transition>
      </>
    </>
  );
};

export default Home;
