import React, { Fragment, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { Listbox, Transition } from "@headlessui/react";
import { CheckIcon, ChevronUpDownIcon } from "@heroicons/react/20/solid";

const Home: NextPage = () => {
  const [game, setGame] = useState("worldle");
  const [userId, setUserId] = useState("");
  const [score, setScore] = useState(4);

  const { data } = trpc.users.getAll.useQuery();
  const createWorldleScoreMutation = trpc.worldle.createScore.useMutation();
  const createSutomScoreMutation = trpc.sutom.createScore.useMutation();

  const handleSelectScore = (e: React.ChangeEvent<HTMLInputElement>) => {
    setScore(parseInt(e.target.value));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (game === "worldle") {
      createWorldleScoreMutation.mutate({ userId, score });
    } else {
      createSutomScoreMutation.mutate({ userId, score });
    }
    resetForm();
  };

  const resetForm = () => {
    setGame("");
    setUserId("");
    setScore(7);
  };

  const displayUserName = (id: string) => {
    const user = data && data.find((user) => user.id === id);
    if (user) return user.name;
  };

  return (
    <>
      <Head>
        <title>Alpha Gang&Games</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex min-h-screen flex-col items-center justify-around px-4 py-20">
        <h1 className="text-center text-3xl font-extrabold leading-normal text-white md:text-[3rem]">
          Alpha Gang&Games
        </h1>
        <div className="flex flex-grow flex-col items-center justify-around rounded-lg border border-slate-700 bg-slate-800 p-6 shadow-md">
          <h2 className="text-center text-2xl">Salut ! tu joues Ã  quoi ?</h2>
          <div className="flex justify-around">
            <div className="mx-2 block">
              <label
                htmlFor="worldle"
                className={`block cursor-pointer rounded border border-gray-500 px-4 py-2 hover:border-green-500 hover:bg-green-500 ${
                  game === "worldle"
                    ? "border-green-500 bg-green-500"
                    : "bg-transparent"
                }`}
              >
                <input
                  className="appearance-none"
                  type="radio"
                  name="worldle"
                  id="worldle"
                  value="worldle"
                  onChange={() => setGame("worldle")}
                  checked={game === "worldle"}
                />
                Worldle
              </label>
            </div>
            <div className="mx-2 block">
              <label
                htmlFor="sutom"
                className={`block cursor-pointer rounded border border-gray-500 px-4 py-2 hover:border-yellow-500 hover:bg-yellow-500 ${
                  game === "sutom"
                    ? "border-yellow-500 bg-yellow-500"
                    : "bg-transparent"
                }`}
              >
                <input
                  type="radio"
                  name="sutom"
                  id="sutom"
                  value="sutom"
                  className="appearance-none"
                  onChange={() => setGame("sutom")}
                  checked={game === "sutom"}
                />
                Sutom
              </label>
            </div>
          </div>
          <h2 className="text-center text-2xl">et ton petit nom ?</h2>
          <div className="w-56">
            <Listbox value={userId} onChange={setUserId}>
              <div className="relative mt-1">
                <Listbox.Button className="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
                  <span className="block truncate text-black">
                    {userId ? displayUserName(userId) : "Choisis dans la liste"}
                  </span>
                  <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                    <ChevronUpDownIcon
                      className="h-5 w-5 text-gray-400"
                      aria-hidden="true"
                    />
                  </span>
                </Listbox.Button>
                <Transition
                  as={Fragment}
                  leave="transition ease-in duration-100"
                  leaveFrom="opacity-100"
                  leaveTo="opacity-0"
                >
                  <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
                    {data
                      ? data.map((user, userIdx) => (
                          <Listbox.Option
                            key={userIdx}
                            className={({ active }) =>
                              `relative cursor-default select-none py-2 pl-10 pr-4 ${
                                active
                                  ? "bg-amber-100 text-amber-900"
                                  : "text-gray-900"
                              }`
                            }
                            value={user.id}
                          >
                            {({ selected }) => (
                              <>
                                <span
                                  className={`block truncate ${
                                    selected ? "font-medium" : "font-normal"
                                  }`}
                                >
                                  {user.name}
                                </span>
                                {selected ? (
                                  <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-amber-600">
                                    <CheckIcon
                                      className="h-5 w-5"
                                      aria-hidden="true"
                                    />
                                  </span>
                                ) : null}
                              </>
                            )}
                          </Listbox.Option>
                        ))
                      : null}
                  </Listbox.Options>
                </Transition>
              </div>
            </Listbox>
          </div>
          <h2 className="text-center text-2xl">balance ton score...</h2>
          <div className="flex justify-around">
            <div className="mx-2 block">
              <label
                htmlFor="1"
                className={`block cursor-pointer rounded border px-4 py-2 hover:border-pink-400 hover:bg-pink-400 ${
                  score === 1
                    ? "border-pink-400 bg-pink-400"
                    : "border-gray-500 bg-transparent"
                }`}
              >
                <input
                  type="radio"
                  className="appearance-none"
                  name="1"
                  id="1"
                  value={1}
                  checked={score === 1}
                  onChange={handleSelectScore}
                />
                1
              </label>
            </div>
            <div className="mx-2 block">
              <label
                htmlFor="2"
                className={`block cursor-pointer rounded border px-4 py-2 hover:border-pink-400 hover:bg-pink-400 ${
                  score === 2
                    ? "border-pink-400 bg-pink-400"
                    : "border-gray-500 bg-transparent"
                }`}
              >
                <input
                  type="radio"
                  className="appearance-none"
                  name="2"
                  id="2"
                  value={2}
                  checked={score === 2}
                  onChange={handleSelectScore}
                />
                2
              </label>
            </div>
            <div className="mx-2 block">
              <label
                htmlFor="3"
                className={`block cursor-pointer rounded border px-4 py-2 hover:border-pink-400 hover:bg-pink-400 ${
                  score === 3
                    ? "border-pink-400 bg-pink-400"
                    : "border-gray-500 bg-transparent"
                }`}
              >
                <input
                  type="radio"
                  className="appearance-none"
                  name="3"
                  id="3"
                  value={3}
                  checked={score === 3}
                  onChange={handleSelectScore}
                />
                3
              </label>
            </div>
            <div className="mx-2 block">
              <label
                htmlFor="4"
                className={`block cursor-pointer rounded border px-4 py-2 hover:border-pink-400 hover:bg-pink-400 ${
                  score === 4
                    ? "border-pink-400 bg-pink-400"
                    : "border-gray-500 bg-transparent"
                }`}
              >
                <input
                  type="radio"
                  className="appearance-none"
                  name="4"
                  id="4"
                  value={4}
                  checked={score === 4}
                  onChange={handleSelectScore}
                />
                4
              </label>
            </div>
            <div className="mx-2 block">
              <label
                htmlFor="5"
                className={`block cursor-pointer rounded border px-4 py-2 hover:border-pink-400 hover:bg-pink-400 ${
                  score === 5
                    ? "border-pink-400 bg-pink-400"
                    : "border-gray-500 bg-transparent"
                }`}
              >
                <input
                  type="radio"
                  className="appearance-none"
                  name="5"
                  id="5"
                  value={5}
                  checked={score === 5}
                  onChange={handleSelectScore}
                />
                5
              </label>
            </div>
            <div className="mx-2 block">
              <label
                htmlFor="6"
                className={`block cursor-pointer rounded border px-4 py-2 hover:border-pink-400 hover:bg-pink-400 ${
                  score === 6
                    ? "border-pink-400 bg-pink-400"
                    : "border-gray-500 bg-transparent"
                }`}
              >
                <input
                  type="radio"
                  className="appearance-none"
                  name="6"
                  id="6"
                  value={6}
                  checked={score === 6}
                  onChange={handleSelectScore}
                />
                6
              </label>
            </div>
            <div className="mx-2 block">
              <label
                htmlFor="7"
                className={`block cursor-pointer rounded border px-4 py-2 hover:border-pink-400 hover:bg-pink-400 ${
                  score === 7
                    ? "border-pink-400 bg-pink-400"
                    : "border-gray-500 bg-transparent"
                }`}
              >
                <input
                  type="radio"
                  className="appearance-none"
                  name="7"
                  id="7"
                  value={7}
                  checked={score === 7}
                  onChange={handleSelectScore}
                />
                7
              </label>
            </div>
          </div>
          <div className="flex justify-center">
            <button
              onClick={handleSubmit}
              className="rounded bg-orange-500 px-4 py-2 hover:bg-orange-700"
            >
              Et Ã§a part!
            </button>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
