import React, { Fragment, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { Layout } from "../components/Layout";
import { GameChoice } from "../components/GameChoice";
import { PlayerChoice } from "../components/PlayerChoice";
import { SelectScore } from "../components/SelectScore";
import { DialogSuccess } from "../components/DialogSuccess";

const Home: NextPage = () => {
  // Form state
  const [game, setGame] = useState<string | undefined>();
  const [userId, setUserId] = useState<string | undefined>();
  const [score, setScore] = useState<number | undefined>();
  // Dialog state
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  // Fetch data fns
  const { data } = trpc.users.getAll.useQuery();
  const createWorldleScoreMutation = trpc.worldle.createScore.useMutation();
  const createSutomScoreMutation = trpc.sutom.createScore.useMutation();

  // Handlers
  const handleSelectScore = (e: React.ChangeEvent<HTMLInputElement>) => {
    setScore(parseInt(e.target.value, 10));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    // TODO: refacto back & front -> use a single endpoint if possible
    if (game === "worldle" && userId && score) {
      createWorldleScoreMutation.mutate(
        { userId, score },
        {
          onSuccess: () => setIsDialogOpen(true),
          onError: (error) => {
            console.error(JSON.stringify(error.message));
          },
        }
      );
    } else if (game === "sutom" && userId && score) {
      createSutomScoreMutation.mutate(
        { userId, score },
        {
          onSuccess: () => setIsDialogOpen(true),
          onError: (error) => {
            console.error(JSON.stringify(error.message));
          },
        }
      );
    }
  };

  const handleCloseDialog = () => {
    setIsDialogOpen(false);
    resetForm();
  };

  // Utils
  const resetForm = () => {
    setGame("worldle");
    setUserId("");
    setScore(4);
  };

  return (
    <>
      <Head>
        <title>Alpha Gang&Games</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="flex flex-grow flex-col items-center justify-between">
          <h2 className="text-center text-xl text-slate-500">
            Hey mais salut ! tu joues à quoi ?
          </h2>
          <GameChoice game={game} onGameChoice={setGame} />
          <h2 className="text-center text-xl text-slate-500">
            ...et ton petit nom ?...
          </h2>
          <PlayerChoice
            userList={data}
            userId={userId}
            onPlayerChoice={setUserId}
          />
          <h2 className="text-center text-xl text-slate-500">
            ...balance ton score !
          </h2>
          <div className="flex justify-around">
            <SelectScore score={score} handleSelectScore={handleSelectScore} />
          </div>
          <div className="flex justify-center">
            <button
              onClick={handleSubmit}
              type="button"
              disabled={!(!!userId && !!score && !!game)}
              className="rounded bg-slate-600 px-4 py-2 hover:bg-slate-50 hover:text-slate-700 disabled:bg-slate-900 disabled:text-slate-700"
            >
              Et ça part!
            </button>
          </div>
        </div>
      </Layout>
      <DialogSuccess
        isDialogOpen={isDialogOpen}
        handleCloseDialog={handleCloseDialog}
        userId={userId}
      />
    </>
  );
};

export default Home;
